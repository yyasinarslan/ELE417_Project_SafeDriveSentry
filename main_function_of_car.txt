/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "time.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void stop(void);
void forward(int speed, int duration);
void backward(int speed, int duration);
void turnLeft(int speed, int duration);
void turnRight(int speed, int duration);
void delay (uint16_t time);
void HCSR04_Read (void);
void forward2(int speed, int duration);
void backward2(int speed, int duration);
void turnLeft2(int speed, int duration);
void turnRight2(int speed, int duration);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
}

uint32_t IC_Val1 = 0;
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint8_t Distance  = 0;
uint8_t Distance_inch  = 0;
int control = 0;
int theSwitch = 1;
uint16_t readX = 0;
uint16_t readY = 0;
#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA
#define arrayLeng 11
#define maxDistance 25
#define turningSpeed 750

void stop(void)
{
	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_RESET);
	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , 0);
	 HAL_Delay(50);
}
 void forward(int speed, int duration)
 {
	 HCSR04_Read();

	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_RESET);

	 	 if(Distance < maxDistance)
		 {
	 		 stop();
	 		 HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
			 //HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
			 HAL_Delay(150);
			 HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
			 //HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);

	 		// HAL_Delay(350);
	 		 backward(speed,750);
	 		 stop();
	 		 control = (rand() % 2)+2;
	 	 }
	 	 else
	 	 {
	 		__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
	 		HAL_Delay(duration);
	 		control = 0;
	 	 }

 }
 void backward(int speed, int duration)
 {
	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_SET);

	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
	 HAL_Delay(duration);
	 control = (rand() % 2)+2;
 }

 void turnLeft(int speed, int duration)
 {
	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_SET);

	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
	 HAL_Delay(duration);
	 stop();
	 control = 0;
 }

 void turnRight(int speed, int duration)
 {
	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_RESET);

	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
	 HAL_Delay(duration);
	 stop();
	 control = 0;
 }



 void forward2(int speed, int duration)
 {
	 HCSR04_Read();

	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_RESET);

		 if(Distance < maxDistance)
		 {
			 stop();
			 HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
			 //HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
			 HAL_Delay(150);
			 HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
			 //HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);

			// HAL_Delay(350);
			// backward(speed,750);
			 stop();
			 //control = (rand() % 2)+2;
		 }
		 else
		 {
			__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
			HAL_Delay(duration);
			control = 0;
		 }
 }

 void backward2(int speed, int duration)
 {
	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_SET);

	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
	 HAL_Delay(duration);
	 stop();
	 HAL_Delay(750);
	 control = 1;
 }
 void turnLeft2(int speed, int duration)
  {
 	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_SET);
 	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_RESET);
 	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_RESET);
 	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_SET);

 	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
 	 HAL_Delay(duration);
 	 stop();
 	HAL_Delay(750);
 	 control = 0;
  }

 void turnRight2(int speed, int duration)
  {
 	 HAL_GPIO_WritePin(motorA_in1_GPIO_Port, motorA_in1_Pin, GPIO_PIN_RESET);
 	 HAL_GPIO_WritePin(motorA_in2_GPIO_Port, motorA_in2_Pin, GPIO_PIN_SET);
 	 HAL_GPIO_WritePin(motorB_in1_GPIO_Port, motorB_in1_Pin, GPIO_PIN_SET);
 	 HAL_GPIO_WritePin(motorB_in2_GPIO_Port, motorB_in2_Pin, GPIO_PIN_RESET);

 	 __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , speed);
 	 HAL_Delay(duration);
 	 stop();
 	 HAL_Delay(750);
 	 control = 0;
  }

 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 	{
 		if (Is_First_Captured==0) // if the first value is not captured
 		{
 			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 			Is_First_Captured = 1;  // set the first captured as true
 			// Now change the polarity to falling edge
 			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 		}

 		else if (Is_First_Captured==1)   // if the first is already captured
 		{
 			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

 			if (IC_Val2 > IC_Val1)
 			{
 				Difference = IC_Val2-IC_Val1;

 			}

 			else if (IC_Val1 > IC_Val2)
 			{
 				Difference = (0xffff - IC_Val1) + IC_Val2;

 			}

 			Distance =  Difference * .034/2;
 			Distance_inch = Distance * 0.3937;
 			Is_First_Captured = 0; // set it back to false

 			// set polarity to rising edge
 			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 		}
 	}
 }

 void HCSR04_Read (void)
 {
 	// Trigger pinine 10 us kadar trig sağlıyoruz. Önce 1 yapıp sonra sıfır yapıyoruz.
 	//Trigger pin output pin olduğu için 10 us tetikleme.
 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 	delay(100);  // wait for 10 us NORMALDE 10
 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

 	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 }


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
 // HAL_UART_Receive_IT(&huart2,RX_BUFFER,BUFFER_LEN);
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA1 TIM2 CH2
   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
	  HAL_UART_Receive_IT(&huart2,RX_BUFFER,BUFFER_LEN);
	  HAL_UART_Receive_IT(&huart2,readX,sizeof(readX));
	  HAL_UART_Receive_IT(&huart2,readY,sizeof(readY));

   int mcqueen = 100;
   stop();


   HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_SET);
   HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
   HAL_Delay(5000);
   HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
   HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(theSwitch == 0)
	  {
		  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
/*		  	  	  	  	 HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_SET);
						 HAL_Delay(350);
						 HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
*/
		  HCSR04_Read();
		  HAL_Delay(100);

		  switch(control)
		  {
			  case 0:
				  forward(mcqueen, 100);
				  break;
			  case 1:
				  backward(mcqueen, 500);
				  break;
			  case 2:
				  turnLeft(mcqueen, turningSpeed);
				  break;
			  case 3:
				  turnRight(mcqueen, turningSpeed);
				  break;
			  default:
				 stop();
				 control = 0;
				 break;
		  }
	  }
	  else if(theSwitch == 1)
	  {
		  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);

			  HCSR04_Read();
			  HAL_Delay(100);
			  if(readX <2048 && readY <2048)
			  {
				  forward2(mcqueen, 100);
			  }
			  else if(readX >2048 && readY >2048)
			  {
				  backward2(mcqueen, 1500);
			  }
			  else if(readX <2048 && readY >2048)
			  {
				  turnLeft2(mcqueen, turningSpeed);
			  }
			  else if(readX >2048 && readY <2048)
			  {
				  turnRight2(mcqueen, turningSpeed);
			  }
			  else
				  stop();

		  //bluetooth
	  }
	  else
	  {
		  stop();
	  }


	 // autoGO(kacoovv, control);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 72-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, myLED_Pin|redLED_Pin|Trigger_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, greenLED_Pin|buzzer_Pin|motorB_in2_Pin|motorB_in1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorA_in1_Pin|motorA_in2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : myLED_Pin redLED_Pin Trigger_Pin */
  GPIO_InitStruct.Pin = myLED_Pin|redLED_Pin|Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : greenLED_Pin buzzer_Pin motorB_in2_Pin motorB_in1_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin|buzzer_Pin|motorB_in2_Pin|motorB_in1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : motorA_in1_Pin motorA_in2_Pin */
  GPIO_InitStruct.Pin = motorA_in1_Pin|motorA_in2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  if(huart->Instance == huart2.Instance)
  {
	  if(RX_BUFFER[0]=='1')
		  theSwitch = 1;
	  else if(RX_BUFFER[0]=='0')
		  theSwitch = 0;

	  HAL_UART_Receive_IT(&huart2,RX_BUFFER,BUFFER_LEN);
	  HAL_UART_Receive_IT(&huart2,readX,sizeof(readX));
	  HAL_UART_Receive_IT(&huart2,readY,sizeof(readY));
  }

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
